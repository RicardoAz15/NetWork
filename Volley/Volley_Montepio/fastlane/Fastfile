# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

before_all do 
	ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
	ENV["ANDROID_HOME"] = "/Users/E5852/AppData/Local/Android/Sdk"
	AVDs = ["system-images;android-25;google_apis;x86_64","x86_64",
             "system-images;android-26;google_apis;x86_64","x86_64",
             "system-images;android-27;google_apis;x86","x86"]
end
 
platform :android do
  desc "Runs all the tests"
  lane :test do
      begin

      gradle(task:"test")

      for i in 0..2 do

        puts "Testing android-" + (25 +i).to_s

            instrumented_tests(
                "avd_name":"test" + i.to_s,
                "avd_package":AVDs[i*2],
                "avd_abi":AVDs[i*2 + 1],
                )
      end


        increment_version_code()

        gradle(task: "assemble",
                build_type: "Release"
                )

        apk = Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]

        upload_to_google_drive(
            drive_keyfile:'Drive_key.json',
            service_account:false,
            folder_id:'1w6Q1lr42Bx3-AMxU5pNd_MkBACMOFtUv',
            upload_files: [apk],
         )
      end
    rescue=>exception
        upload_to_slack(exception.message,false,"Error")
    else
        upload_to_slack("Complete ",true,"Success")
  end


  def upload_to_slack(rMessage,isSuccess,isError)
	slack(
		message: isError,
		success: isSuccess,
		slack_url: "https://hooks.slack.com/services/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",
		attachment_properties: {
                	fields: [
                  		 {
	                	      	 title: isError,
        		              	 value: rMessage
                   		}
               		]
		}
	)
end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics
  
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end
end
